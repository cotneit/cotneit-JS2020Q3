(()=>{"use strict";var t={};function e(t){return t<10?"0"+t:""+t}t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var s=t.g.document;if(!e&&s&&(s.currentScript&&(e=s.currentScript.src),!e)){var i=s.getElementsByTagName("script");i.length&&(e=i[i.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})();class s{constructor(){this.intervals=[]}update(){this.intervals[this.intervals.length-1]+=1e3,this.updateElement()}start(){this.active=!0,this.intervals.push(0),this.interval=setInterval((()=>{this.update()}),1e3)}pause(){this.active&&(clearInterval(this.interval),this.active=!1)}reset(){this.pause(),this.intervals.length=0,this.updateElement()}getTime(){const t=e(this.getHours()),s=e(this.getMinutes()),i=e(this.getSeconds());return"00"===t?`${s}:${i}`:`${t}:${s}:${i}`}getMilliseconds(){return this.intervals.reduce(((t,e)=>t+e),0)%1e3}getSeconds(){const t=this.intervals.reduce(((t,e)=>t+e),0);return Math.floor(t%6e4/1e3)}getMinutes(){const t=this.intervals.reduce(((t,e)=>t+e),0);return Math.floor(t%36e5/6e4)}getHours(){const t=this.intervals.reduce(((t,e)=>t+e),0);return Math.floor(t/36e5)}createElement(t){return this.DOMElement=document.createElement(t),this.updateElement(),this.DOMElement}updateElement(){this.DOMElement&&(this.DOMElement.textContent=this.getTime())}}const i=t.p+"assets/audio/tile-move.mp3";document.documentElement.classList.add("page"),document.body.classList.add("page__inner");const n=(new class{constructor(){this.timer=new s,this.state={size:4,tiles:[],moves:0,isSolved:!1},this.stateProxy=new Proxy(this.state,{set:(t,e,s,i)=>("moves"===e&&(this.elements.moveCounter.textContent="Moves: "+s),"size"===e?(Reflect.set(t,e,s,i),this.startNewGame(),!0):Reflect.set(t,e,s,i))}),this.eventListeners={tileOnClick:t=>{const{tiles:e,size:s}=this.state,i=e.map((t=>t.element)).indexOf(t.target),n=t.target;if(!this.state.isSolved&&!this.isTransitioning)switch(this.timer.active||this.timer.start(),!0){case e[i-1]&&-1===e[i-1].id&&i%s!=0:[e[i],e[i-1]]=[e[i-1],e[i]],this.stateProxy.moves+=1,n.style.transform="translateX(-100%) translateX(-2px)";break;case e[i+1]&&-1===e[i+1].id&&i%s!=s-1:[e[i],e[i+1]]=[e[i+1],e[i]],this.stateProxy.moves+=1,n.style.transform="translateX(100%) translateX(2px)";break;case e[i-s]&&-1===e[i-s].id:[e[i],e[i-s]]=[e[i-s],e[i]],this.stateProxy.moves+=1,n.style.transform="translateY(-100%) translateY(-2px)";break;case e[i+s]&&-1===e[i+s].id:[e[i],e[i+s]]=[e[i+s],e[i]],this.stateProxy.moves+=1,n.style.transform="translateY(100%) translateY(2px)"}},tileOnTransitionStart:t=>{"transform"===t.propertyName&&(this.isTransitioning=!0,new Audio(i).play())},tileOnTransitionEnd:t=>{"transform"===t.propertyName&&(this.renderTiles(),this.checkState())}}}init(){return this.createElements(),this.generateTiles(),this.startNewGame(),this.elements.container}startNewGame(){this.state.isSolved=!1,this.stateProxy.moves=0,this.timer.reset(),this.shuffleTiles(),this.renderTiles(),this.elements.board.style.gridTemplateColumns=`repeat(${this.state.size}, 1fr)`}generateTiles(){const t=this.state.size**2,e=[],s={id:-1,element:document.createElement("div")};for(let s=0;s<t-1;s+=1){const t={};t.id=s+1,t.element=document.createElement("div"),t.element.classList.add("gem-puzzle__tile"),t.element.textContent=t.id,e.push(t),t.element.addEventListener("click",this.eventListeners.tileOnClick),t.element.addEventListener("transitionstart",this.eventListeners.tileOnTransitionStart),t.element.addEventListener("transitionend",this.eventListeners.tileOnTransitionEnd)}e.push(s),this.state.tiles=e}renderTiles(){const{tiles:t}=this.state;t.forEach((t=>{t.element.style.transform="",this.elements.board.append(t.element),this.isTransitioning=!1}))}checkState(){const t=this.state.tiles.map((t=>t.id));for(let e=0;e+2<t.length;e+=1)if(t[e+1]!==t[e]+1)return;this.timer.pause(),this.state.isSolved=!0,setTimeout((()=>{alert(`You solved the puzzle in ${this.timer.getTime()} and made ${this.state.moves} moves.\nSorry for the alert, work in progress.`)}),0)}shuffleTiles(){const t=this.state.size**2,{tiles:e}=this.state;for(let s=0;s<t;s+=1){const i=Math.floor(Math.random()*t);[e[s],e[i]]=[e[i],e[s]]}this.isSolvable()||this.shuffleTiles()}isSolvable(){const{tiles:t,size:e}=this.state,s=t.map((t=>t.id)),i=s.indexOf(-1),n=Math.ceil((i+1)/e);let r=0;for(let t=0;t<s.length;t+=1)if(-1!==s[t])for(let e=t;e<s.length;e+=1)s[t]>s[e]&&-1!==s[e]&&(r+=1);if(e%2==1&&r%2==0)return!0;if(e%2==0){if(n%2==1&&r%2==1)return!0;if(n%2==0&&r%2==0)return!0}return!1}createElements(){const t=document.createElement("div"),e=document.createElement("div"),s=document.createElement("div"),i=document.createElement("span"),n=document.createElement("span"),r=document.createElement("button");t.classList.add("gem-puzzle"),e.classList.add("gem-puzzle__status-bar"),s.classList.add("gem-puzzle__board"),s.style.gridTemplateColumns=`repeat(${this.state.size}, 1fr)`,i.textContent="Timer: ",i.append(this.timer.createElement("time")),n.textContent="Moves: 0",r.type="button",r.classList.add("gem-puzzle__button"),r.textContent="New game",r.addEventListener("click",(()=>{this.startNewGame()})),e.append(i,r,n),t.append(e,s),this.elements={container:t,statusBar:e,board:s,timer:i,moveCounter:n}}}).init();document.body.append(n)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,